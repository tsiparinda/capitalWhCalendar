package auth

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"path/filepath"

	"golang.org/x/oauth2"
	"golang.org/x/oauth2/google"
)

var Scopes = []string{
	"https://www.googleapis.com/auth/drive.file",
	"https://www.googleapis.com/auth/calendar",
}

// GetServiceClient ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑–±—Ä–∞—É–∑–µ—Ä–Ω—ã–π OAuth-–∫–ª–∏–µ–Ω—Ç.
// –¢—Ä–µ–±—É–µ—Ç –∑–∞—Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã secrets/client_secret.json –∏ secrets/google-token.json.
func GetServiceClient() *http.Client {
	ctx := context.Background()

	// 1Ô∏è‚É£ –ü—É—Ç–∏ –∫ —Å–µ–∫—Ä–µ—Ç–∞–º
	clientSecretPath := filepath.Join("secrets", "client_secret.json")
	tokenPath := filepath.Join("secrets", "google-token.json")

	// 2Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º client_secret.json
	b, err := os.ReadFile(clientSecretPath)
	if err != nil {
		log.Fatalf("Unable to read %s: %v", clientSecretPath, err)
	}

	config, err := google.ConfigFromJSON(b, Scopes...)
	if err != nil {
		log.Fatalf("Unable to parse client secret: %v", err)
	}

	// 3Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω (—Å–æ–∑–¥–∞–Ω –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ manual_auth.go)
	tok, err := tokenFromFile(tokenPath)
	if err != nil {
		log.Fatalf("Missing or invalid token file (%s): %v", tokenPath, err)
	}

	// 4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
	ts := config.TokenSource(ctx, tok)
	newTok, err := ts.Token()
	if err != nil {
		log.Fatalf("Unable to refresh token: %v", err)
	}

	// 5Ô∏è‚É£ –ï—Å–ª–∏ access_token –æ–±–Ω–æ–≤–∏–ª—Å—è ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π
	if newTok.AccessToken != tok.AccessToken {
		saveToken(tokenPath, newTok)
	}

	return config.Client(ctx, newTok)
}

// ------------------ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ------------------

func tokenFromFile(file string) (*oauth2.Token, error) {
	f, err := os.Open(file)
	if err != nil {
		return nil, err
	}
	defer f.Close()
	tok := &oauth2.Token{}
	err = json.NewDecoder(f).Decode(tok)
	return tok, err
}

func saveToken(path string, token *oauth2.Token) {
	f, err := os.Create(path)
	if err != nil {
		log.Printf("‚ö†Ô∏è Unable to save refreshed token: %v", err)
		return
	}
	defer f.Close()
	json.NewEncoder(f).Encode(token)
	fmt.Printf("üíæ Token updated in %s\n", path)
}
